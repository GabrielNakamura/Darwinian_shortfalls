library(ape)
res_phylo_marine <- readRDS(here::here("output", "phylo_marine.rds"))
phy_marine <- res_phylo_marine$Phylogeny
insertions_marine <- res_phylo_marine$Insertions_data
phy <- phy_marine
runs <- 8
runs <- 3
parallel <- 4
trees <- vector("list", length = runs)
resolves <- Ntip(tree) - Nnode(tree) - 1
tree <- phy_marine
runs <- 3
parallel <- 4
trees <- vector("list", length = runs)
resolves <- Ntip(tree) - Nnode(tree) - 1
newClusters <- FALSE
if (is.numeric(parallel)) {
if(!parallel%%1==0){
stop("\n parallel must an integer")
}
n.cluster <- parallel
parallel <- parallel::makeCluster(parallel, type = "PSOCK")
newClusters <- TRUE
}
!inherits(parallel, "cluster")
polytomies_solver <- function(n.polytomy, nruns){
for (j in 1:n.polytomy) {
# j = 1
descendent_counts <- rle(sort(tree$edge[, 1]))
polytomies <- descendent_counts$values[which(descendent_counts$lengths >
2)]
if (length(polytomies) > 1)
target_polytomy <- sample(polytomies, size = 1)
else target_polytomy <- polytomies
polytomy_edges <- which(tree$edge[, 1] == target_polytomy)
target_edges <- sample(polytomy_edges, size = 2)
new_node <- max(tree$edge) + 1
tree$edge[target_edges, 1] <- new_node
new_edge <- c(target_polytomy, new_node)
tree$edge <- rbind(tree$edge, new_edge)
new_length <- runif(n = 1, min = 0, max = min(tree$edge.length[target_edges]))
tree$edge.length <- c(tree$edge.length, new_length)
tree$edge.length[target_edges] <- tree$edge.length[target_edges] -
new_length
tree$Nnode <- tree$Nnode + 1
}
}
if (is.numeric(parallel)) {
if(!parallel%%1==0){
stop("\n parallel must an integer")
}
n.cluster <- parallel
parallel <- parallel::makeCluster(parallel, type = "PSOCK")
newClusters <- TRUE
}
resolves
polytomies_solver
trees <- parallel::parLapply(parallel, seq_len(runs), fun = polytomies_solver,
n.polytomy = resolves)
if (newClusters) {
parallel::stopCluster(parallel)
}
polytomies_solver <- function(tree, n.polytomy, nruns){
for (j in 1:n.polytomy) {
# j = 1
descendent_counts <- rle(sort(tree$edge[, 1]))
polytomies <- descendent_counts$values[which(descendent_counts$lengths >
2)]
if (length(polytomies) > 1)
target_polytomy <- sample(polytomies, size = 1)
else target_polytomy <- polytomies
polytomy_edges <- which(tree$edge[, 1] == target_polytomy)
target_edges <- sample(polytomy_edges, size = 2)
new_node <- max(tree$edge) + 1
tree$edge[target_edges, 1] <- new_node
new_edge <- c(target_polytomy, new_node)
tree$edge <- rbind(tree$edge, new_edge)
new_length <- runif(n = 1, min = 0, max = min(tree$edge.length[target_edges]))
tree$edge.length <- c(tree$edge.length, new_length)
tree$edge.length[target_edges] <- tree$edge.length[target_edges] -
new_length
tree$Nnode <- tree$Nnode + 1
}
}
trees <- vector("list", length = runs)
if (is.numeric(parallel)) {
if(!parallel%%1==0){
stop("\n parallel must an integer")
}
n.cluster <- parallel
parallel <- parallel::makeCluster(parallel, type = "PSOCK")
newClusters <- TRUE
}
tree <- phy_marine
runs <- 3
parallel <- 4
if (is.numeric(parallel)) {
if(!parallel%%1==0){
stop("\n parallel must an integer")
}
n.cluster <- parallel
parallel <- parallel::makeCluster(parallel, type = "PSOCK")
newClusters <- TRUE
}
trees <- parallel::parLapply(parallel, seq_len(runs), fun = polytomies_solver,
n.polytomy = resolves)
trees <- parallel::parLapply(parallel, seq_len(runs), fun = polytomies_solver,
tree = tree,
n.polytomy = resolves)
trees
if (newClusters) {
parallel::stopCluster(parallel)
}
res_phylo_marine <- readRDS(here::here("output", "phylo_marine.rds"))
phy_marine <- res_phylo_marine$Phylogeny
insertions_marine <- res_phylo_marine$Insertions_data
polytomies_solver <- function(tree, n.polytomy, nruns){
for (j in 1:n.polytomy) {
# j = 1
descendent_counts <- rle(sort(tree$edge[, 1]))
polytomies <- descendent_counts$values[which(descendent_counts$lengths >
2)]
if (length(polytomies) > 1)
target_polytomy <- sample(polytomies, size = 1)
else target_polytomy <- polytomies
polytomy_edges <- which(tree$edge[, 1] == target_polytomy)
target_edges <- sample(polytomy_edges, size = 2)
new_node <- max(tree$edge) + 1
tree$edge[target_edges, 1] <- new_node
new_edge <- c(target_polytomy, new_node)
tree$edge <- rbind(tree$edge, new_edge)
new_length <- runif(n = 1, min = 0, max = min(tree$edge.length[target_edges]))
tree$edge.length <- c(tree$edge.length, new_length)
tree$edge.length[target_edges] <- tree$edge.length[target_edges] -
new_length
tree$Nnode <- tree$Nnode + 1
}
return(tree)
}
resolves <- Ntip(tree) - Nnode(tree) - 1
tree <- phy_marine
runs <- 3
parallel <- 4
resolves <- Ntip(tree) - Nnode(tree) - 1
newClusters <- FALSE
if (is.numeric(parallel)) {
if(!parallel%%1==0){
stop("\n parallel must an integer")
}
n.cluster <- parallel
parallel <- parallel::makeCluster(parallel, type = "PSOCK")
newClusters <- TRUE
}
trees <- parallel::parLapply(parallel, seq_len(runs), fun = polytomies_solver,
tree = tree,
n.polytomy = resolves)
if (newClusters) {
parallel::stopCluster(parallel)
}
trees
ape::comparePhylo(trees[[1]], trees[[2]])
match(trees[[1]]$edge.length, trees[[2]]$edge.length)
match(trees[[1]]$edge.length, trees[[1]]$edge.length)
match(trees[[1]]$edge.length, trees[[2]]$edge.length)
which(trees[[1]]$edge.length == trees[[2]]$edge.length)
which(trees[[1]]$edge.length != trees[[2]]$edge.length)
# functions
source(here::here("R", "functions", "function_parallel_bifurctr.R"))
# Data, libraries and functions ------------------------------------------------------
library(ape)
library(FishPhyloMaker)
# Data
res_phylo_marine <- readRDS(here::here("output", "phylo_marine.rds"))
phy_marine <- res_phylo_marine$Phylogeny
insertions_marine <- res_phylo_marine$Insertions_data
# functions
source(here::here("R", "functions", "function_parallel_bifurctr.R"))
# solving polytomies (Sunplin method Rangel et al) ------------------------
system.time(phylo_solve_100_marine <- bifurcatr_parallel(tree = phy_marine, runs = 5, parallel = 3)
)
phylo_solve_100_marine
Darwinian_shortfall_marine <-
FishPhyloMaker::PD_deficit(phylo = phylo_solve_100_marine[[1]],
data = insertions_marine$insertions,
level = c("Congeneric_insertion",
"Family_insertion",
"Order_insertion")
)
phylo_solve_100_marine[[1]]
insertions_marine$insertions
insertions_marine
Darwinian_shortfall_marine <-
FishPhyloMaker::PD_deficit(phylo = phylo_solve_100_marine[[1]],
data = insertions_marine,
level = c("Congeneric_insertion",
"Family_insertion",
"Order_insertion")
)
Darwinian_shortfall_marine
res_phylo_marine
res_phylo_marine$Phylogeny
Darwinian_shortfall_marine_base <-
FishPhyloMaker::PD_deficit(phylo = res_phylo_marine$Phylogeny,
data = insertions_marine,
level = c("Congeneric_insertion",
"Family_insertion",
"Order_insertion")
)
Darwinian_shortfall_marine_base
Darwinian_shortfall_marine <-
FishPhyloMaker::PD_deficit(phylo = phylo_solve_100_marine[[1]],
data = insertions_marine,
level = c("Congeneric_insertion",
"Family_insertion",
"Order_insertion")
)
Darwinian_shortfall_marine
Darwinian_shortfall_marine_base
Darwinian_shortfall_marine <-
FishPhyloMaker::PD_deficit(phylo = phylo_solve_100_marine[[5]],
data = insertions_marine,
level = c("Congeneric_insertion",
"Family_insertion",
"Order_insertion")
)
Darwinian_shortfall_marine
Darwinian_shortfall_marine <-
FishPhyloMaker::PD_deficit(phylo = phylo_solve_100_marine[[3]],
data = insertions_marine,
level = c("Congeneric_insertion",
"Family_insertion",
"Order_insertion")
)
Darwinian_shortfall_marine
Darwinian_shortfall_marine <-
lapply(phylo_solve_100_marine, function(x){
FishPhyloMaker::PD_deficit(phylo = x,
data = insertions_marine,
level = c("Congeneric_insertion",
"Family_insertion",
"Order_insertion")
)
}
)
do.call(cbind, Darwinian_shortfall_marine)
do.call(rbind, Darwinian_shortfall_marine)
library(phyloregion)
data(africa)
africa$IUCN
africa$phylo
y <- EDGE(x=africa$IUCN, phy=africa$phylo, Redlist="IUCN", species="Species")
y
EDGE
?evol_distinct
?EDGE
install.packages("rredlist")
db_fishbase <- species()
library(rfishbase)
devtools::install_github("Otoliths/rFishTaxa")
db_fishbase
db_fishbase <- species()
colnames(db_fishbase)
db_fishbase$Vulnerability
range(db_fishbase$Vulnerability)
sum(is.na(db_fishbase$Vulnerability))
range(db_fishbase$Vulnerability, na.rm = T)
db_fishbase$Expert
library(phyloregion)
res_phylo_marine <- readRDS(file = here::here("phylo_marine.rds"))
res_phylo_marine <- readRDS(file = here::here("output", "phylo_marine.rds"))
phylo_marine <- res_phylo_marine$Phylogeny
which(is.na(cons_status) == TRUE)
cons_status <- db_fishbase$Vulnerability # check if this can be used as a proxy for IUCN endangered categories
which(is.na(cons_status) == TRUE)
cons_status
spp_df <- read.table(here::here("taxa_table.txt"), header = TRUE) # species cleaned
spp_df <- read.table(here::here("data", "taxa_table.txt"), header = TRUE) # species cleaned
spp_df
colnames(db_fishbase)
db_fishbase[which(is.na(cons_status) == TRUE), "Species"]
dim(db_fishbase[which(is.na(cons_status) == TRUE), "Species"])
db_fishbase$Species
db_fishbase[which(is.na(cons_status) != TRUE), "Species"]
cons_status_spp_fb <- db_fishbase[which(is.na(cons_status) != TRUE), "Species"]
spp_df$s
cons_status_spp_fb
match(gsub(cons_status_spp_fb, " ", "_"), spp_df$s)
gsub(cons_status_spp_fb, " ", "_")
gsub(cons_status_spp_fb$Species, " ", "_")
cons_status_spp_fb$Species
gsub(" ", "_", cons_status_spp_fb$Species)
match(gsub(" ", "_", cons_status_spp_fb$Species), spp_df$s)
spp_df[match(gsub(" ", "_", cons_status_spp_fb$Species), spp_df$s). "s"]
spp_df[match(gsub(" ", "_", cons_status_spp_fb$Species), spp_df$s), "s"]
dim(spp_df)
unique(gsub(" ", "_", cons_status_spp_fb$Species))
cons_status_spp_fb <- db_fishbase[which(is.na(cons_status) != TRUE), ]
cons_status_spp_fb$Species
match(spp_df$s, unique(gsub(" ", "_", cons_status_spp_fb$Species)))
cons_status_spp_fb[match(spp_df$s, unique(gsub(" ", "_", cons_status_spp_fb$Species))), "Vulnerability"]
dim(cons_status_spp_fb[match(spp_df$s, unique(gsub(" ", "_", cons_status_spp_fb$Species))), "Vulnerability"])
length(db_fishbase$Species)
dim(spp_df)
cons_status_spp_fb[match(spp_df$s, unique(gsub(" ", "_", cons_status_spp_fb$Species))), "Vulnerability"]
spp_df$s
unique(gsub(" ", "_", cons_status_spp_fb$Species))
match(spp_df$s, unique(gsub(" ", "_", cons_status_spp_fb$Species)))
spp_df$s[937]
which(is.na(match(spp_df$s, unique(gsub(" ", "_", cons_status_spp_fb$Species)))) != TRUE)
which(is.na(match(spp_df$s, unique(gsub(" ", "_", cons_status_spp_fb$Species)))) == TRUE)
which(is.na(match(spp_df$s, unique(gsub(" ", "_", cons_status_spp_fb$Species)))) != TRUE)
status_df_spp <- cons_status_spp_fb[which(is.na(match(spp_df$s, unique(gsub(" ", "_", cons_status_spp_fb$Species)))) != TRUE), "Vulnerability"]
status_df_spp
