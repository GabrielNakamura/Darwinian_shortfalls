phylo_marine <- readRDS(here::here("output", "phylo_marine.rds"))
res_phylo_marine <- readRDS(here::here("output", "phylo_marine.rds"))
phy_marine <- res_phylo_marine$Phylogeny
insertions_marine <- res_phylo_marine$Insertions_data
devtools::install_github("davidnipperess/PDcalc",build_vignettes = TRUE)
devtools::install_github("davidnipperess/PDcalc")
library(PDcalc)
help(package = "PDcalc")
phy_marine
test <- PDcalc::bifurcatr(phy = phy_marine, runs = 2)
bifurcatr
lsf.str("package:PDcalc")
ape::Nnode
ape::Ntip(tree)
rle
function (phy, runs = 1)
{
trees <- vector("list", length = runs)
for (i in 1:runs) {
tree <- phy
resolves <- ape::Ntip(tree) - ape::Nnode(tree) - 1
for (j in 1:resolves) {
descendent_counts <- rle(sort(tree$edge[, 1]))
polytomies <- descendent_counts$values[which(descendent_counts$lengths >
2)]
if (length(polytomies) > 1)
target_polytomy <- sample(polytomies, size = 1)
else target_polytomy <- polytomies
polytomy_edges <- which(tree$edge[, 1] == target_polytomy)
target_edges <- sample(polytomy_edges, size = 2)
new_node <- max(tree$edge) + 1
tree$edge[target_edges, 1] <- new_node
new_edge <- c(target_polytomy, new_node)
tree$edge <- rbind(tree$edge, new_edge)
new_length <- runif(n = 1, min = 0, max = min(tree$edge.length[target_edges]))
tree$edge.length <- c(tree$edge.length, new_length)
tree$edge.length[target_edges] <- tree$edge.length[target_edges] -
new_length
tree$Nnode <- tree$Nnode + 1
}
trees[[i]] <- tree
}
if (runs == 1) {
trees <- trees[[1]]
class(trees) <- "phylo"
}
else {
class(trees) <- "multiPhylo"
}
return(trees)
}
bifurcatr_2<-
function (phy, runs = 1)
{
trees <- vector("list", length = runs)
for (i in 1:runs) {
tree <- phy
resolves <- ape::Ntip(tree) - ape::Nnode(tree) - 1
for (j in 1:resolves) {
descendent_counts <- rle(sort(tree$edge[, 1]))
polytomies <- descendent_counts$values[which(descendent_counts$lengths >
2)]
if (length(polytomies) > 1)
target_polytomy <- sample(polytomies, size = 1)
else target_polytomy <- polytomies
polytomy_edges <- which(tree$edge[, 1] == target_polytomy)
target_edges <- sample(polytomy_edges, size = 2)
new_node <- max(tree$edge) + 1
tree$edge[target_edges, 1] <- new_node
new_edge <- c(target_polytomy, new_node)
tree$edge <- rbind(tree$edge, new_edge)
new_length <- runif(n = 1, min = 0, max = min(tree$edge.length[target_edges]))
tree$edge.length <- c(tree$edge.length, new_length)
tree$edge.length[target_edges] <- tree$edge.length[target_edges] -
new_length
tree$Nnode <- tree$Nnode + 1
}
trees[[i]] <- tree
}
if (runs == 1) {
trees <- trees[[1]]
class(trees) <- "phylo"
}
else {
class(trees) <- "multiPhylo"
}
return(trees)
}
test <- bifurcatr_2(phy = phy_marine, runs = 2)
test
test[[1]]
quartz()
library(ape)
plot(test[[1]])
phy <- phy_marine
runs <- 2
trees <- vector("list", length = runs)
trees
tree <- phy
resolves <- ape::Ntip(tree) - ape::Nnode(tree) - 1
resolves
ape::Ntip(tree) - ape::Nnode(tree)
tree$tip.label
length(tree$tip.label)
ape::Ntip(tree)
ape::Nnode(tree)
ape::Ntip(tree) - ape::Nnode(tree)
resolves
j = 1
rle(sort(tree$edge[, 1]))
tree$edge[, 1]
?rle
rle(sort(tree$edge[, 1]))
tree$edge[, 1]
tree$edge
tree$edge[, 1])
sort(tree$edge[, 1])
rle(sort(tree$edge[, 1]))
# j = 1
descendent_counts <- rle(sort(tree$edge[, 1]))
table(descendent_counts$lengths)
# j = 1
descendent_counts <- rle(sort(tree$edge[, 1]))
descendent_counts$values[which(descendent_counts$lengths >
2)]
polytomies <- descendent_counts$values[which(descendent_counts$lengths >
2)]
polytomies
polytomies <- descendent_counts$values[which(descendent_counts$lengths >
2)]
target_polytomy <- sample(polytomies, size = 1)
target_polytomy
polytomy_edges <- which(tree$edge[, 1] == target_polytomy)
polytomy_edges
tree$edge[, 1]
polytomy_edges
target_edges <- sample(polytomy_edges, size = 2)
new_node <- max(tree$edge) + 1
new_node
tree$edge
tree$edge[target_edges, 1] <- new_node
new_edge <- c(target_polytomy, new_node)
new_edge
target_polytomy
new_node
rbind(tree$edge, new_edge)
new_edge
tree$edge
tree$edge <- rbind(tree$edge, new_edge)
runif(n = 1, min = 0, max = min(tree$edge.length[target_edges]))
new_length <- runif(n = 1, min = 0, max = min(tree$edge.length[target_edges]))
tree$edge.length <- c(tree$edge.length, new_length)
tree$edge.length
tree$edge.length[target_edges] <- tree$edge.length[target_edges] -
new_length
tree$Nnode <- tree$Nnode + 1
tree$Nnode
?bifurcatr
resolves
polytomies
target_polytomy
new_node
new_edge
new_node
new_edge
tree$edge.length
new_length
target_edges
tree$edge.length[target_edges] -
new_length
tree$edge.length[target_edges]
target_edges
new_edge
target_polytomy
polytomies
resolves
descendent_counts$values[which(descendent_counts$lengths >
2)]
length(polytomies)
resolves
descendent_counts$values[which(descendent_counts$lengths >
2)]
ape::Ntip(tree) - ape::Nnode(tree) - 1
resolves
resolves
# j = 1
descendent_counts <- rle(sort(tree$edge[, 1]))
descendent_counts
descendent_counts$values[which(descendent_counts$lengths >
2)]
descendent_counts
sum(descendent_counts)
sum(descendent_counts$lengths)
resolves
sum(descendent_counts$lengths[which(descendent_counts$lengths >
2)])
polytomies
descendent_counts$values[which(descendent_counts$lengths >
2)]
descendent_counts$values[which(descendent_counts$lengths >
2)]
j = 1
trees <- vector("list", length = runs)
tree <- phy
resolves <- ape::Ntip(tree) - ape::Nnode(tree) - 1
resolves
for (j in 1:resolves) {
# j = 1
descendent_counts <- rle(sort(tree$edge[, 1]))
polytomies <- descendent_counts$values[which(descendent_counts$lengths >
2)]
if (length(polytomies) > 1)
target_polytomy <- sample(polytomies, size = 1)
else target_polytomy <- polytomies
polytomy_edges <- which(tree$edge[, 1] == target_polytomy)
target_edges <- sample(polytomy_edges, size = 2)
new_node <- max(tree$edge) + 1
tree$edge[target_edges, 1] <- new_node
new_edge <- c(target_polytomy, new_node)
tree$edge <- rbind(tree$edge, new_edge)
new_length <- runif(n = 1, min = 0, max = min(tree$edge.length[target_edges]))
tree$edge.length <- c(tree$edge.length, new_length)
tree$edge.length[target_edges] <- tree$edge.length[target_edges] -
new_length
tree$Nnode <- tree$Nnode + 1
}
for (j in 1:resolves) {
# j = 1
descendent_counts <- rle(sort(tree$edge[, 1]))
polytomies <- descendent_counts$values[which(descendent_counts$lengths >
2)]
if (length(polytomies) > 1)
target_polytomy <- sample(polytomies, size = 1)
else target_polytomy <- polytomies
polytomy_edges <- which(tree$edge[, 1] == target_polytomy)
target_edges <- sample(polytomy_edges, size = 2)
new_node <- max(tree$edge) + 1
tree$edge[target_edges, 1] <- new_node
new_edge <- c(target_polytomy, new_node)
tree$edge <- rbind(tree$edge, new_edge)
new_length <- runif(n = 1, min = 0, max = min(tree$edge.length[target_edges]))
tree$edge.length <- c(tree$edge.length, new_length)
tree$edge.length[target_edges] <- tree$edge.length[target_edges] -
new_length
tree$Nnode <- tree$Nnode + 1
print(paste("run", j, sep = " "))
}
resolves
res_phylo_marine <- readRDS(here::here("output", "phylo_marine.rds"))
phy_marine <- res_phylo_marine$Phylogeny
insertions_marine <- res_phylo_marine$Insertions_data
phy <- phy_marine
bifurcatr
trees
trees <- vector("list", length = runs)
phy <- phy_marine
runs <- 2
trees <- vector("list", length = runs)
for (j in 1:resolves) {
# j = 1
descendent_counts <- rle(sort(tree$edge[, 1]))
polytomies <- descendent_counts$values[which(descendent_counts$lengths >
2)]
if (length(polytomies) > 1)
target_polytomy <- sample(polytomies, size = 1)
else target_polytomy <- polytomies
polytomy_edges <- which(tree$edge[, 1] == target_polytomy)
target_edges <- sample(polytomy_edges, size = 2)
new_node <- max(tree$edge) + 1
tree$edge[target_edges, 1] <- new_node
new_edge <- c(target_polytomy, new_node)
tree$edge <- rbind(tree$edge, new_edge)
new_length <- runif(n = 1, min = 0, max = min(tree$edge.length[target_edges]))
tree$edge.length <- c(tree$edge.length, new_length)
tree$edge.length[target_edges] <- tree$edge.length[target_edges] -
new_length
tree$Nnode <- tree$Nnode + 1
print(paste("run", j, sep = " "))
}
tree <- phy
resolves <- Ntip(tree) - Nnode(tree) - 1
resolves
for (j in 1:resolves) {
# j = 1
descendent_counts <- rle(sort(tree$edge[, 1]))
polytomies <- descendent_counts$values[which(descendent_counts$lengths >
2)]
if (length(polytomies) > 1)
target_polytomy <- sample(polytomies, size = 1)
else target_polytomy <- polytomies
polytomy_edges <- which(tree$edge[, 1] == target_polytomy)
target_edges <- sample(polytomy_edges, size = 2)
new_node <- max(tree$edge) + 1
tree$edge[target_edges, 1] <- new_node
new_edge <- c(target_polytomy, new_node)
tree$edge <- rbind(tree$edge, new_edge)
new_length <- runif(n = 1, min = 0, max = min(tree$edge.length[target_edges]))
tree$edge.length <- c(tree$edge.length, new_length)
tree$edge.length[target_edges] <- tree$edge.length[target_edges] -
new_length
tree$Nnode <- tree$Nnode + 1
print(paste("run", j, sep = " "))
}
parallel <- 8
!parallel%%1==0
parallel%%1
parallel
parallel%%1==0
!parallel%%1==0
parallel
parallel%%
1
inherits(parallel, "cluster")
!inherits(parallel, "cluster")
seq_len(n.cluster)
seq_len(8)
seq_len(runs)
runs <- 8
seq_len(runs)
polytomies_solver <- function(n.polytomy, nruns){
for (j in 1:n.polytomy) {
# j = 1
descendent_counts <- rle(sort(tree$edge[, 1]))
polytomies <- descendent_counts$values[which(descendent_counts$lengths >
2)]
if (length(polytomies) > 1)
target_polytomy <- sample(polytomies, size = 1)
else target_polytomy <- polytomies
polytomy_edges <- which(tree$edge[, 1] == target_polytomy)
target_edges <- sample(polytomy_edges, size = 2)
new_node <- max(tree$edge) + 1
tree$edge[target_edges, 1] <- new_node
new_edge <- c(target_polytomy, new_node)
tree$edge <- rbind(tree$edge, new_edge)
new_length <- runif(n = 1, min = 0, max = min(tree$edge.length[target_edges]))
tree$edge.length <- c(tree$edge.length, new_length)
tree$edge.length[target_edges] <- tree$edge.length[target_edges] -
new_length
tree$Nnode <- tree$Nnode + 1
}
}
phy <- phy_marine
runs <- 8
parallel <- 8
trees <- vector("list", length = runs)
newClusters <- FALSE
if (is.numeric(parallel)) {
if(!parallel%%1==0){
stop("\n parallel must an integer")
}
n.cluster <- parallel
parallel <- parallel::makeCluster(parallel, type = "PSOCK")
newClusters <- TRUE
}
if (!inherits(parallel, "cluster")) {
for (i in 1:runs) {
tree <- phy
resolves <- Ntip(tree) - Nnode(tree) - 1
tree <- polytomies_solver(resolves)
trees[[i]] <- tree
}
if (runs == 1) {
trees <- trees[[1]]
class(trees) <- "phylo"
}
else {
class(trees) <- "multiPhylo"
}
} else {
trees <- parallel::parLapply(parallel, seq_len(runs), fun = polytomies_solver,
n.polytomy)
}
trees <- parallel::parLapply(parallel, seq_len(runs), fun = polytomies_solver,
n.polytomy)
polytomies_solver <- function(n.polytomy, nruns){
for (j in 1:n.polytomy) {
# j = 1
descendent_counts <- rle(sort(tree$edge[, 1]))
polytomies <- descendent_counts$values[which(descendent_counts$lengths >
2)]
if (length(polytomies) > 1)
target_polytomy <- sample(polytomies, size = 1)
else target_polytomy <- polytomies
polytomy_edges <- which(tree$edge[, 1] == target_polytomy)
target_edges <- sample(polytomy_edges, size = 2)
new_node <- max(tree$edge) + 1
tree$edge[target_edges, 1] <- new_node
new_edge <- c(target_polytomy, new_node)
tree$edge <- rbind(tree$edge, new_edge)
new_length <- runif(n = 1, min = 0, max = min(tree$edge.length[target_edges]))
tree$edge.length <- c(tree$edge.length, new_length)
tree$edge.length[target_edges] <- tree$edge.length[target_edges] -
new_length
tree$Nnode <- tree$Nnode + 1
}
}
polytomies_solver
trees <- parallel::parLapply(parallel, seq_len(runs), fun = polytomies_solver,
n.polytomy)
resolves <- Ntip(tree) - Nnode(tree) - 1
trees <- parallel::parLapply(parallel, seq_len(runs), fun = polytomies_solver,
n.polytomy = resolves)
